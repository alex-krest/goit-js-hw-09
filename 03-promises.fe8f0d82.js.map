{"version":3,"sources":["js/03-promises.js"],"names":["refs","formEl","document","querySelector","delayEl","stepEl","amountEl","buttonEl","delay","Number","elements","value","step","amount","createPromise","position","data","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","console","log","addEventListener","then","catch"],"mappings":";AACA,MAAMA,EAAO,CACXC,OAAQC,SAASC,cAAc,SAC/BC,QAASF,SAASC,cAAc,gBAChCE,OAAQH,SAASC,cAAc,eAC/BG,SAAUJ,SAASC,cAAc,iBACjCI,SAAUL,SAASC,cAAc,gBAG7BK,EAAQC,OAAOT,EAAKC,OAAOS,SAASF,MAAMG,OAC1CC,EAAOH,OAAOT,EAAKC,OAAOS,SAASE,KAAKD,OACxCE,EAASJ,OAAOT,EAAKC,OAAOS,SAASG,OAAOF,OAOlD,SAASG,EAAcC,EAAUP,GACzBQ,MAAAA,EAAO,CACXD,SAAUA,EAASJ,MACnBH,MAAOA,EAAMG,OAGR,OAAA,IAAIM,QAAQ,CAACC,EAASC,KACrBC,MAAAA,EAAgBC,KAAKC,SAAW,GAEtCC,WAAW,KACLH,EACFF,EAAQF,GAERG,EAAOH,IAERR,KArBPgB,QAAQC,IAAIjB,GACZgB,QAAQC,IAAIb,GACZY,QAAQC,IAAIZ,GAEZb,EAAKC,OAAOyB,iBAAiB,SAAUZ,GAqBvCA,EAAcE,MACXW,KAAK,EAAGZ,SAAAA,EAAUP,MAAAA,MACjBgB,QAAQC,2BAA2BV,QAAeP,SAEnDoB,MAAM,EAAGb,SAAAA,EAAUP,MAAAA,MAClBgB,QAAQC,0BAA0BV,QAAeP","file":"03-promises.fe8f0d82.js","sourceRoot":"../src","sourcesContent":["//----Ссылки на элементы\nconst refs = {\n  formEl: document.querySelector('.form'),\n  delayEl: document.querySelector('[name=delay]'),\n  stepEl: document.querySelector('[name=step]'),\n  amountEl: document.querySelector('[name=amount]'),\n  buttonEl: document.querySelector('form>button'),\n};\n// -Взяли значения полей формы:\nconst delay = Number(refs.formEl.elements.delay.value);\nconst step = Number(refs.formEl.elements.step.value);\nconst amount = Number(refs.formEl.elements.amount.value);\nconsole.log(delay);\nconsole.log(step);\nconsole.log(amount);\n// ----Функция отправки формы\nrefs.formEl.addEventListener('submit', createPromise);\n// -------------------------------\nfunction createPromise(position, delay) {\n  const data = {\n    position: position.value,\n    delay: delay.value,\n  };\n  // --ПРОМИС-------------------------\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    // --Функция отложенного вызова - задержка вызова\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(data);\n      } else {\n        reject(data);\n      }\n    }, delay);\n  });\n}\n// --Обработка промисов\ncreatePromise(data)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n//----Функция колбек для отправки формы\n// function createPromise(e) {\n//   e.preventDefault();\n//   // --Элементы формы выделяем как переменные, чтобы брать их значения\n//   const {\n//     elements: { delay, step, amount },\n//   } = e.target;\n//   // ---передаем в setInterval:\n//   const interval = Number(delay.value) + Number(step.value);\n\n//   // ---передаем в счетчик:\n//   const counterCall = Number(amount.value);\n//   // ---Генератор случайного числа:\n//   const shouldResolve = Math.random() > 0.3;\n//   // -Интервал с частотой вызова промиса\n//   setInterval(() => {\n//     // -Цикл генераций промисов\n//     for (let i = 0; i < counterCall; i += 1) {\n//       if (shouldResolve) {\n//         // --передаем номер промиса в промис:\n//         const position = i + 1;\n//         new Promise(() => {\n//           console.log(`Fulfilled promise № ${position} in ${interval} ms`);\n//         });\n//       } else {\n//         const position = i + 1;\n//         console.log(`Rejected promise № ${position} in ${interval} ms`);\n//       }\n//     }\n//   }, interval);\n// }\n"]}