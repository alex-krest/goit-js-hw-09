{"version":3,"sources":["js/03-promises.js"],"names":["refs","formEl","document","querySelector","delayEl","stepEl","amountEl","buttonEl","startPromise","e","preventDefault","elements","delay","step","amount","currentTarget","firstDelay","Number","value","stepValue","amountValue","del","i","position","createPromise","then","console","log","catch","addEventListener","shouldResolve","Math","random","Promise","resolve","reject","setTimeout"],"mappings":";AACA,MAAMA,EAAO,CACXC,OAAQC,SAASC,cAAc,SAC/BC,QAASF,SAASC,cAAc,gBAChCE,OAAQH,SAASC,cAAc,eAC/BG,SAAUJ,SAASC,cAAc,iBACjCI,SAAUL,SAASC,cAAc,gBAMnC,SAASK,EAAaC,GACpBA,EAAEC,iBAEI,MACJC,UAAU,MAAEC,EAAF,KAASC,EAAT,OAAeC,IACvBL,EAAEM,cAEAC,EAAaC,OAAOL,EAAMM,OAC1BC,EAAYF,OAAOJ,EAAKK,OACxBE,EAAcH,OAAOH,EAAOI,OAC9BG,IAAAA,EAAM,EAEL,IAAA,IAAIC,EAAI,EAAGA,GAAKF,EAAaE,GAAK,EAAG,CAClCC,MAAAA,EAAWD,EACP,IAANA,EAEFE,EAAcD,EADdF,EAAML,GAEHS,KAAK,EAAGF,SAAAA,EAAUX,MAAAA,MACjBc,QAAQC,2BAA2BJ,QAAeX,SAEnDgB,MAAM,EAAGL,SAAAA,EAAUX,MAAAA,MAClBc,QAAQC,0BAA0BJ,QAAeX,SAIrDY,EAAcD,EADdF,GAAOF,GAEJM,KAAK,EAAGF,SAAAA,EAAUX,MAAAA,MACjBc,QAAQC,2BAA2BJ,QAAeX,SAEnDgB,MAAM,EAAGL,SAAAA,EAAUX,MAAAA,MAClBc,QAAQC,0BAA0BJ,QAAeX,UAjC3DZ,EAAKC,OAAO4B,iBAAiB,SAAUrB,GAwCvC,MAAMgB,EAAgB,CAACD,EAAUX,KAEzBkB,MAAAA,EAAgBC,KAAKC,SAAW,GAE/B,OAAA,IAAIC,QAAQ,CAACC,EAASC,KAE3BC,WAAW,KACLN,EACFI,EAAQ,CAAEX,SAAAA,EAAUX,MAAAA,IAEpBuB,EAAO,CAAEZ,SAAAA,EAAUX,MAAAA,KAEpBA","file":"03-promises.8aa69698.js","sourceRoot":"../src","sourcesContent":["//----Ссылки на элементы\nconst refs = {\n  formEl: document.querySelector('.form'),\n  delayEl: document.querySelector('[name=delay]'),\n  stepEl: document.querySelector('[name=step]'),\n  amountEl: document.querySelector('[name=amount]'),\n  buttonEl: document.querySelector('form>button'),\n};\n\nrefs.formEl.addEventListener('submit', startPromise);\n\n//   ----ФУНКЦИЯ КОЛБЕК ДЛЯ ОТПРАВКИ ФОРМЫ С ЗАПУСКОМ ЦИКЛА ВЫЗОВОВ ПРОМИСОВ\nfunction startPromise(e) {\n  e.preventDefault();\n  // --элементы формы выделяем как переменные, чтобы брать их значения\n  const {\n    elements: { delay, step, amount },\n  } = e.currentTarget;\n  // -переводим значение в числовой формат\n  const firstDelay = Number(delay.value);\n  const stepValue = Number(step.value);\n  const amountValue = Number(amount.value);\n  let del = 0;\n  // -Цикл генераций промисов c их обработкой\n  for (let i = 1; i <= amountValue; i += 1) {\n    const position = i;\n    if (i === 1) {\n      del = firstDelay;\n      createPromise(position, del)\n        .then(({ position, delay }) => {\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    } else {\n      del += stepValue;\n      createPromise(position, del)\n        .then(({ position, delay }) => {\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    }\n  }\n}\n\n// --ФУНКЦИЯ ЗАПУСКА ОДНОГО ПРОМИСА\nconst createPromise = (position, delay) => {\n  //--генератор случайного числа:\n  const shouldResolve = Math.random() > 0.3;\n  // --промис-------------------------\n  return new Promise((resolve, reject) => {\n    // --функция отложенного вызова - задержка вызова\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n};\n"]}